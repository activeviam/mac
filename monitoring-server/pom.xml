<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>quartetfs.biz.pivot</groupId>
	<artifactId>monitoring-server</artifactId>
	<name>Monitoring Web Application</name>
	<version>5.4.1</version>
	<packaging>war</packaging>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>quartetfs.biz.pivot</groupId>
				<artifactId>activepivot-server</artifactId>
				<version>5.4.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<dependencies>
		<!-- ActivePivot Dependencies -->
		<dependency>
			<groupId>quartetfs.biz.pivot</groupId>
			<artifactId>activepivot-server-spring</artifactId>
		</dependency>

		<!-- TODO to remove in 5.5. Note: this is due to the fact a class 
		was supposed to be in the main package of datastore but escape to 
		its creator's attention. For legacy reason, the class will stay here
		until 5.5 release. -->
		<dependency>
			<groupId>quartetfs.biz.pivot</groupId>
			<artifactId>datastore</artifactId>
			<type>test-jar</type>
		</dependency>

		<!-- Composer dependencies are provided in QFS artifacts -->
		<!-- And must be explicitly declared in application projects -->
		<dependency>
			<groupId>quartetfs.composer</groupId>
			<artifactId>composer-intf</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>quartetfs.composer</groupId>
			<artifactId>composer-impl</artifactId>
			<scope>compile</scope>
		</dependency>

		<!-- The following artifact allows to expose the Rest API of the content 
			service -->
		<dependency>
			<groupId>quartetfs.composer.content</groupId>
			<artifactId>content-server-spring</artifactId>
		</dependency>

		<!-- Dependencies for the content service persistence -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-c3p0</artifactId>
		</dependency>

		<!-- Xerces override -->
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>quartetfs.biz.pivot</groupId>
			<artifactId>activepivot-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>websocket-client</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>javax-websocket-server-impl</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>websocket-servlet</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlets</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<!-- JDK 7 is required for the Sandbox Application -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<encoding>ISO-8859-15</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<encoding>ISO-8859-15</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.7</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>generate-message-bundles</id>
						<phase>process-classes</phase>
						<configuration>
							<target>
								<!-- generate the I18N resource bundles -->
								<taskdef name="i18n" classpathref="maven.compile.classpath"
									classname="mazz.i18n.ant.I18NAntTask" />
								<i18n outputdir="${project.build.outputDirectory}"
									defaultlocale="en" verbose="false" verify="true">
									<classpath refid="maven.compile.classpath" />
									<classfileset dir="${project.build.outputDirectory}">
										<include name="**/*.class" />
									</classfileset>
								</i18n>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.3.2</version>
				<configuration>
					<classpathScope>test</classpathScope>
				</configuration>
			</plugin>

		</plugins>

		<pluginManagement>
			<!--This plugin's configuration is used to store Eclipse m2e settings 
				only. It has no influence on the Maven build itself. -->
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.0,)</versionRange>
										<goals>
											<goal>copy-dependencies</goal>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
