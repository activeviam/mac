{
  "style" : { },
  "showTitleBar" : false,
  "body" : {
    "pages" : [ {
      "content" : [ {
        "key" : "1",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "view",
              "renderer" : "markdown",
              "content" : "# Common Pitfalls\n\nThis bookmarks presents some common problems that can be exposed using MAC.\n\nEach following page presents one of these problems along with:\n* causes\n* usual symptoms\n* suggestions and links to other more detailed bookmarks for further analysis\n\nThese pages use the statistics that are currently loaded into MAC and will try to suggest a view that exposes best what to look out for when trying to detect the described problems.\n\nThey serve only as a quick indicators for common problems, detailed analysis may still need to be done using more detailed views."
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      } ],
      "layout" : {
        "ck" : "1"
      },
      "name" : "Common pitfalls"
    }, {
      "content" : [ {
        "key" : "1",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "edit",
              "renderer" : "markdown",
              "content" : "# Indexes are too large\n\n"
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      }, {
        "key" : "2",
        "bookmark" : {
          "name" : "Untitled Pivot Table",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "serverUrl" : "",
              "mdx" : "SELECT NON EMPTY {[Measures].[DirectMemory.SUM], [Measures].[DirectMemory.Ratio]} ON COLUMNS, NON EMPTY Order(Crossjoin(DrilldownLevel([Owners].[Owner].[ALL].[AllMember]), Hierarchize(DrilldownLevel([Indices].[Index Type].[ALL].[AllMember])), DrilldownLevel([Indices].[Indexed Fields].[ALL].[AllMember])), [Measures].[DirectMemory.SUM], DESC) ON ROWS FROM [MemoryCube] WHERE [Components].[Component].[ALL].[AllMember].[INDEX] CELL PROPERTIES BACK_COLOR, FONT_FLAGS, FORE_COLOR, FORMATTED_VALUE, VALUE",
              "contextValues" : { },
              "updateMode" : "once",
              "ranges" : {
                "row" : {
                  "chunkSize" : 2000,
                  "thresholdPercentage" : 0.1
                },
                "column" : {
                  "chunkSize" : 50,
                  "thresholdPercentage" : 0.2
                }
              },
              "configuration" : {
                "tabular" : {
                  "pinnedHeaderSelector" : "member",
                  "sortingMode" : "non-breaking",
                  "addButtonFilter" : "numeric",
                  "cellRenderers" : [ "tree-layout" ],
                  "statisticsShown" : true,
                  "columnsGroups" : [ {
                    "captionProducer" : "firstColumn",
                    "cellFactory" : "kpi-status",
                    "selector" : "kpi-status"
                  }, {
                    "captionProducer" : "firstColumn",
                    "cellFactory" : "lookup",
                    "selector" : "lookup"
                  }, {
                    "captionProducer" : "expiry",
                    "cellFactory" : "expiry",
                    "selector" : "kpi-expiry"
                  }, {
                    "captionProducer" : "columnMerge",
                    "cellFactory" : {
                      "args" : { },
                      "key" : "treeCells"
                    },
                    "selector" : "member"
                  } ],
                  "hideAddButton" : true,
                  "defaultOptions" : { },
                  "columns" : [ {
                    "key" : "c-treeCells-member",
                    "width" : 508
                  } ],
                  "expansion" : {
                    "automaticExpansion" : true
                  }
                }
              }
            },
            "containerKey" : "pivot-table"
          },
          "writable" : true
        }
      }, {
        "key" : "3",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "edit",
              "renderer" : "markdown",
              "content" : "\n"
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      }, {
        "key" : "4",
        "bookmark" : {
          "name" : "Untitled Chart",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "configuration" : {
                "type" : "plotly-line-chart",
                "mapping" : {
                  "xAxis" : [ "[Owners].[Owner].[Owner]", "[Indices].[Indexed Fields].[Indexed Fields]" ],
                  "values" : [ "[Measures].[DirectMemory.SUM]" ],
                  "splitBy" : [ ],
                  "horizontalSubplots" : [ ],
                  "verticalSubplots" : [ ]
                },
                "switchedTo" : "plotly-tree-map"
              },
              "query" : {
                "serverUrl" : "",
                "mdx" : "SELECT NON EMPTY [Measures].[DirectMemory.SUM] ON COLUMNS, NON EMPTY Crossjoin([Owners].[Owner].[Owner].Members, [Indices].[Indexed Fields].[Indexed Fields].Members) ON ROWS FROM [MemoryCube]",
                "updateMode" : "once"
              }
            },
            "containerKey" : "chart"
          },
          "writable" : true
        }
      } ],
      "layout" : {
        "children" : {
          "0" : {
            "ck" : "1",
            "size" : 0.23
          },
          "1" : {
            "children" : {
              "0" : {
                "children" : {
                  "0" : {
                    "ck" : "2",
                    "size" : 0.5
                  },
                  "1" : {
                    "ck" : "4",
                    "size" : 0.5
                  }
                },
                "direction" : "row",
                "size" : 0.7
              },
              "1" : {
                "ck" : "3",
                "size" : 0.3
              }
            },
            "direction" : "column",
            "size" : 0.77
          }
        },
        "direction" : "column"
      },
      "name" : "Large indexes",
      "filters" : {
        "MemoryCube" : [ ]
      }
    }, {
      "content" : [ {
        "key" : "1",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "view",
              "renderer" : "markdown",
              "content" : "# Too many members in bitmap/leaf aggregate providers\n\nThe size of the aggregate store of a bitmap or leaf aggregate provider depends on the cardinalities of the hierarchies it handles.\n\nHaving a bitmap provider handle too many members can make it unnecessarily large: it can sometimes be sufficient to have it handle less measures and/or hierarchies depending on the use case.\n\nHere are the largest aggregate store memory footprints in the analyzed application, categorized by owner, aggregate provider id, and measure:"
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      }, {
        "key" : "2",
        "bookmark" : {
          "name" : "Untitled Pivot Table",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "serverUrl" : "",
              "mdx" : "SELECT\n  NON EMPTY Order(\n    Crossjoin(\n      DrilldownLevel(\n        [Owners].[Owner].[ALL].[AllMember]\n      ),\n      Hierarchize(\n        DrilldownLevel(\n          [Aggregate Provider].[ProviderType].[ALL].[AllMember]\n        )\n      ),\n      Hierarchize(\n        DrilldownLevel(\n          [Aggregate Provider].[ProviderId].[ALL].[AllMember]\n        )\n      ),\n      Hierarchize(\n        DrilldownLevel(\n          [Fields].[Field].[ALL].[AllMember]\n        )\n      )\n    ),\n    [Measures].[DirectMemory.SUM],\n    DESC\n  ) ON ROWS,\n  NON EMPTY {\n    [Measures].[DirectMemory.SUM],\n    [Measures].[DirectMemory.Ratio]\n  } ON COLUMNS\n  FROM (\n    SELECT\n    Crossjoin(\n      {\n        [Owners].[Owner Type].[ALL].[AllMember].[Cube],\n        [Owners].[Owner Type].[ALL].[AllMember].[Distributed Cube]\n      },\n      {\n        Except(\n          [Aggregate Provider].[ProviderCategory].[ALL].[AllMember].Children,\n          [Aggregate Provider].[ProviderCategory].[ALL].[AllMember].[N/A]\n        )\n      },\n      [Components].[Component].[ALL].[AllMember].[AGGREGATE_STORE]\n    ) ON COLUMNS\n    FROM [MemoryCube]\n  )\n  CELL PROPERTIES VALUE, FORMATTED_VALUE, BACK_COLOR, FORE_COLOR, FONT_FLAGS",
              "contextValues" : { },
              "updateMode" : "once",
              "ranges" : {
                "row" : {
                  "chunkSize" : 2000,
                  "thresholdPercentage" : 0.1
                },
                "column" : {
                  "chunkSize" : 50,
                  "thresholdPercentage" : 0.2
                }
              },
              "configuration" : {
                "tabular" : {
                  "pinnedHeaderSelector" : "member",
                  "sortingMode" : "non-breaking",
                  "addButtonFilter" : "numeric",
                  "cellRenderers" : [ "tree-layout" ],
                  "statisticsShown" : true,
                  "columnsGroups" : [ {
                    "captionProducer" : "firstColumn",
                    "cellFactory" : "kpi-status",
                    "selector" : "kpi-status"
                  }, {
                    "captionProducer" : "firstColumn",
                    "cellFactory" : "lookup",
                    "selector" : "lookup"
                  }, {
                    "captionProducer" : "expiry",
                    "cellFactory" : "expiry",
                    "selector" : "kpi-expiry"
                  }, {
                    "captionProducer" : "columnMerge",
                    "cellFactory" : {
                      "args" : { },
                      "key" : "treeCells"
                    },
                    "selector" : "member"
                  } ],
                  "hideAddButton" : true,
                  "defaultOptions" : { },
                  "expansion" : {
                    "automaticExpansion" : true
                  },
                  "isConnected" : false
                }
              }
            },
            "containerKey" : "pivot-table"
          },
          "writable" : true
        }
      }, {
        "key" : "3",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "view",
              "renderer" : "markdown",
              "content" : "Consider, for each cube, the hierarchies and measures its most memory-consuming providers handle.\n\nDepending on the queries done on each measure, consider whether or not some hierarchies can be cut from the aggregate provider's handled measures.\n\nFurther analysis regarding aggregate providers can be done with the [aggregate provider bookmark](#/dashboard/aggregate_providers)."
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      }, {
        "key" : "4",
        "bookmark" : {
          "name" : "Untitled Chart",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "configuration" : {
                "type" : "plotly-tree-map",
                "mapping" : {
                  "values" : [ "[Measures].[DirectMemory.SUM]" ],
                  "groupBy" : [ ],
                  "splitBy" : [ "[Owners].[Owner].[Owner]", "[Aggregate Provider].[ProviderType].[ProviderType]", "[Aggregate Provider].[ProviderId].[ProviderId]", "[Fields].[Field].[Field]" ],
                  "horizontalSubplots" : [ ],
                  "verticalSubplots" : [ ]
                },
                "subplotModeEnabled" : true
              },
              "query" : {
                "serverUrl" : "",
                "mdx" : "SELECT NON EMPTY [Measures].[DirectMemory.SUM] ON COLUMNS, NON EMPTY Crossjoin([Owners].[Owner].[Owner].Members, [Aggregate Provider].[ProviderType].[ProviderType].Members, [Aggregate Provider].[ProviderId].[ProviderId].Members, [Fields].[Field].[Field].Members) ON ROWS FROM (SELECT Crossjoin({Except([Aggregate Provider].[ProviderCategory].[ALL].[AllMember].Children, [Aggregate Provider].[ProviderCategory].[ALL].[AllMember].[N/A])}, [Components].[Component].[ALL].[AllMember].[AGGREGATE_STORE], [Aggregate Provider].[ProviderType].[ProviderType].Members, [Aggregate Provider].[ProviderId].[ProviderId].Members, [Fields].[Field].[Field].Members) ON COLUMNS FROM [MemoryCube])",
                "updateMode" : "once"
              },
              "isConnected" : false
            },
            "containerKey" : "chart"
          },
          "writable" : true
        }
      } ],
      "layout" : {
        "children" : {
          "0" : {
            "ck" : "1",
            "size" : 0.21
          },
          "1" : {
            "children" : {
              "0" : {
                "children" : {
                  "0" : {
                    "ck" : "2",
                    "size" : 0.37
                  },
                  "1" : {
                    "ck" : "4",
                    "size" : 0.63
                  }
                },
                "size" : 0.81,
                "direction" : "row"
              },
              "1" : {
                "ck" : "3",
                "size" : 0.19
              }
            },
            "direction" : "column",
            "size" : 0.79
          }
        },
        "direction" : "column"
      },
      "name" : "Too many members in bitmaps",
      "filters" : {
        "MemoryCube" : [ ]
      }
    }, {
      "content" : [ {
        "key" : "1",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "view",
              "renderer" : "markdown",
              "content" : "# Store chunks are oversized\n\nStore chunk size can be configured on a per-store bases using `.withChunkSize(int)` when building each store's description.\n\nIf not specified, the default chunk size is either retrieved from program arguments (`-DdefaultChunkSize`), or deduced from the amount of available memory (on-and-off-heap). The default value might not be the most suitable depending on the cardinality of the store.\n\nIn the case where a store has its chunk size configured to be much higher than its cardinality, it is very likely that its chunks will end up being mostly empty, wasting memory unneededly."
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      }, {
        "key" : "2",
        "bookmark" : {
          "name" : "Untitled Pivot Table",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "serverUrl" : "",
              "mdx" : "SELECT NON EMPTY {[Measures].[DirectMemory.SUM], [Measures].[ChunkSize.SUM], [Measures].[NonWrittenRows.Ratio]} ON COLUMNS, NON EMPTY Crossjoin(Order(DrilldownLevel([Owners].[Owner].[ALL].[AllMember]), [Measures].[DirectMemory.SUM], DESC), Order(Hierarchize(DrilldownLevel([Fields].[Field].[ALL].[AllMember])), [Measures].[NonWrittenRows.Ratio], ASC)) ON ROWS FROM [MemoryCube] WHERE [Owners].[Owner Type].[ALL].[AllMember].[Store] CELL PROPERTIES VALUE, FORMATTED_VALUE, BACK_COLOR, FORE_COLOR, FONT_FLAGS",
              "contextValues" : { },
              "updateMode" : "once",
              "refreshInterval" : 10,
              "ranges" : {
                "row" : {
                  "chunkSize" : 2000,
                  "thresholdPercentage" : 0.1
                },
                "column" : {
                  "chunkSize" : 50,
                  "thresholdPercentage" : 0.2
                }
              },
              "configuration" : {
                "tabular" : {
                  "pinnedHeaderSelector" : "member",
                  "sortingMode" : "non-breaking",
                  "addButtonFilter" : "numeric",
                  "cellRenderers" : [ "tree-layout" ],
                  "statisticsShown" : true,
                  "columnsGroups" : [ {
                    "captionProducer" : "firstColumn",
                    "cellFactory" : "kpi-status",
                    "selector" : "kpi-status"
                  }, {
                    "captionProducer" : "firstColumn",
                    "cellFactory" : "lookup",
                    "selector" : "lookup"
                  }, {
                    "captionProducer" : "expiry",
                    "cellFactory" : "expiry",
                    "selector" : "kpi-expiry"
                  }, {
                    "captionProducer" : "columnMerge",
                    "cellFactory" : {
                      "args" : { },
                      "key" : "treeCells"
                    },
                    "selector" : "member"
                  } ],
                  "hideAddButton" : true,
                  "defaultOptions" : { },
                  "columns" : [ {
                    "key" : "c-treeCells-member",
                    "width" : 232
                  } ],
                  "expansion" : {
                    "automaticExpansion" : true
                  }
                }
              }
            },
            "containerKey" : "pivot-table"
          },
          "writable" : true
        }
      }, {
        "key" : "3",
        "bookmark" : {
          "name" : "Untitled Text Editor",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "editingMode" : "view",
              "renderer" : "markdown",
              "content" : "Pay attention to the value of the measure `NonWrittenRows.Ratio`. It designates the ratio of wasted space due to oversizing of the chunks.\n\nIf the most compact column of a store proves to have a lot of unused allocated space, this can mean that either:\n* the store chunk size is oversized compared to the data holds, and it can be safely reduced with minor drawback\n* the store partitioning scheme is suboptimal and some partitions (and their chunks as a consequence) have much less data in them\n\nReducing store chunk size too much is also detrimental since this will cause the number of chunks to increase, increasing overhead when doing operations on the store.\n\nFurther analysis regarding store memory consumption can be done with the [field analysis bookmark](#/dashboard/fields), adding the `NonWrittenRows.Ratio` measure to the relevant pages, or on the [overview bookmark](#/dashboard/overview)."
            },
            "containerKey" : "rich-text-editor"
          },
          "writable" : true
        }
      }, {
        "key" : "4",
        "bookmark" : {
          "name" : "Untitled Chart",
          "type" : "container",
          "value" : {
            "style" : { },
            "showTitleBar" : false,
            "body" : {
              "configuration" : {
                "type" : "plotly-line-chart",
                "mapping" : {
                  "xAxis" : [ ],
                  "values" : [ ],
                  "splitBy" : [ ],
                  "horizontalSubplots" : [ ],
                  "verticalSubplots" : [ ]
                }
              },
              "query" : {
                "serverUrl" : "",
                "mdx" : "SELECT FROM [MemoryCube]",
                "updateMode" : "once"
              }
            },
            "containerKey" : "chart"
          },
          "writable" : true
        }
      } ],
      "layout" : {
        "children" : {
          "0" : {
            "ck" : "1",
            "size" : 0.24
          },
          "1" : {
            "children" : {
              "0" : {
                "children" : {
                  "0" : {
                    "ck" : "2",
                    "size" : 0.47
                  },
                  "1" : {
                    "ck" : "4",
                    "size" : 0.53
                  }
                },
                "direction" : "row",
                "size" : 0.66
              },
              "1" : {
                "ck" : "3",
                "size" : 0.34
              }
            },
            "direction" : "column",
            "size" : 0.76
          }
        },
        "direction" : "column"
      },
      "name" : "Oversized store chunks",
      "filters" : {
        "MemoryCube" : [ ]
      }
    } ]
  },
  "containerKey" : "dashboard"
}